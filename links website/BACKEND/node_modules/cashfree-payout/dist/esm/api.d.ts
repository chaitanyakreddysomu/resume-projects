/**
 * Cashfree Payout APIs
 * Cashfree\'s Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2024-01-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosRequestConfig } from 'axios';
import { CFEnvironment } from './configuration';
/**
 * Contains the information of the created beneficiary
 * @export
 * @interface Beneficiary
 */
export interface Beneficiary {
    /**
     * It displays the unique ID you created to identify the beneficiary.
     * @type {string}
     * @memberof Beneficiary
     */
    'beneficiary_id'?: string;
    /**
     * It displays the name of the beneficiary.
     * @type {string}
     * @memberof Beneficiary
     */
    'beneficiary_name'?: string;
    /**
     *
     * @type {BeneficiaryBeneficiaryInstrumentDetails}
     * @memberof Beneficiary
     */
    'beneficiary_instrument_details'?: BeneficiaryBeneficiaryInstrumentDetails;
    /**
     *
     * @type {BeneficiaryBeneficiaryContactDetails}
     * @memberof Beneficiary
     */
    'beneficiary_contact_details'?: BeneficiaryBeneficiaryContactDetails;
    /**
     * It displays the current status of the beneficiary. Possible values are as follows - `VERIFIED`: Beneficiary is verified and is available for payouts - `INVALID`: Beneficiary is invalid - `INITIATED`: Beneficiary verification initiated - `CANCELLED`: Beneficiary verification cancelled - `FAILED`: Failed to verify beneficiary - `DELETED`: Beneficiary is deleted
     * @type {string}
     * @memberof Beneficiary
     */
    'beneficiary_status'?: BeneficiaryBeneficiaryStatusEnum;
    /**
     * It displays the time of the addition of the beneficiary in UTC.
     * @type {string}
     * @memberof Beneficiary
     */
    'added_on'?: string;
}
export declare const BeneficiaryBeneficiaryStatusEnum: {
    readonly VERIFIED: "VERIFIED";
    readonly INVALID: "INVALID";
    readonly INITIATED: "INITIATED";
    readonly CANCELLED: "CANCELLED";
    readonly FAILED: "FAILED";
    readonly DELETED: "DELETED";
    readonly UNKNOWN_DEFAULT_OPEN_API: "11184809";
};
export type BeneficiaryBeneficiaryStatusEnum = typeof BeneficiaryBeneficiaryStatusEnum[keyof typeof BeneficiaryBeneficiaryStatusEnum];
/**
 * It displays the contact details of the beneficiary.
 * @export
 * @interface BeneficiaryBeneficiaryContactDetails
 */
export interface BeneficiaryBeneficiaryContactDetails {
    /**
     * It displays the email address of the beneficiary.
     * @type {string}
     * @memberof BeneficiaryBeneficiaryContactDetails
     */
    'beneficiary_email'?: string;
    /**
     * It displays the phone number of the beneficiary without the country code.
     * @type {string}
     * @memberof BeneficiaryBeneficiaryContactDetails
     */
    'beneficiary_phone'?: string;
    /**
     * It displays the country code of the beneficiary\'s phone number.
     * @type {string}
     * @memberof BeneficiaryBeneficiaryContactDetails
     */
    'beneficiary_country_code'?: string;
    /**
     * It displays the address of the beneficiary.
     * @type {string}
     * @memberof BeneficiaryBeneficiaryContactDetails
     */
    'beneficiary_address'?: string;
    /**
     * It displays the name of the city as present in the beneficiary\'s address.
     * @type {string}
     * @memberof BeneficiaryBeneficiaryContactDetails
     */
    'beneficiary_city'?: string;
    /**
     * It displays the name of the state as present in the beneficiary\'s address.
     * @type {string}
     * @memberof BeneficiaryBeneficiaryContactDetails
     */
    'beneficiary_state'?: string;
    /**
     * It displays the PIN code as present in the beneficiary\'s address.
     * @type {string}
     * @memberof BeneficiaryBeneficiaryContactDetails
     */
    'beneficiary_postal_code'?: string;
}
/**
 * It displays the payment instrument details of the beneficiary.
 * @export
 * @interface BeneficiaryBeneficiaryInstrumentDetails
 */
export interface BeneficiaryBeneficiaryInstrumentDetails {
    /**
     * It displays the bank account of the beneficiary.
     * @type {string}
     * @memberof BeneficiaryBeneficiaryInstrumentDetails
     */
    'bank_account_number'?: string;
    /**
     * It displays the IFSC information of the beneficiary\'s bank account.
     * @type {string}
     * @memberof BeneficiaryBeneficiaryInstrumentDetails
     */
    'bank_ifsc'?: string;
    /**
     * It displays the UPI VPA information of the beneficiary.
     * @type {string}
     * @memberof BeneficiaryBeneficiaryInstrumentDetails
     */
    'vpa'?: string;
}
/**
 * Batch Transfer V2
 * @export
 * @interface CreateBatchTransferRequest
 */
export interface CreateBatchTransferRequest {
    /**
     * It is the unique ID you create to identify the batch transfer request. The maximum character limit is 60. Alphanumeric and underscore ( _ ) characters are allowed.
     * @type {string}
     * @memberof CreateBatchTransferRequest
     */
    'batch_transfer_id': string;
    /**
     *
     * @type {Array<CreateBatchTransferRequestTransfersInner>}
     * @memberof CreateBatchTransferRequest
     */
    'transfers'?: Array<CreateBatchTransferRequestTransfersInner>;
}
/**
 *
 * @export
 * @interface CreateBatchTransferRequestTransfersInner
 */
export interface CreateBatchTransferRequestTransfersInner {
    /**
     * It is the unique ID you create to identify the transfer. You can use a maximum of 40 characters to create a transfer_id.  Alphanumeric and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof CreateBatchTransferRequestTransfersInner
     */
    'transfer_id': string;
    /**
     * It is the transfer amount. Decimal values are allowed. The minimum value should be equal to or greater than 1.00. (>= 1.00)
     * @type {number}
     * @memberof CreateBatchTransferRequestTransfersInner
     */
    'transfer_amount': number;
    /**
     * It is the currency of the transfer amount. The default value is INR.
     * @type {string}
     * @memberof CreateBatchTransferRequestTransfersInner
     */
    'transfer_currency'?: string;
    /**
     * It is the mode of transfer. Allowed values are banktransfer, imps, neft, rtgs, upi, paytm, amazonpay, card. The default transfer_mode is banktransfer.
     * @type {string}
     * @memberof CreateBatchTransferRequestTransfersInner
     */
    'transfer_mode'?: CreateBatchTransferRequestTransfersInnerTransferModeEnum;
    /**
     *
     * @type {CreateBatchTransferRequestTransfersInnerBeneficiaryDetails}
     * @memberof CreateBatchTransferRequestTransfersInner
     */
    'beneficiary_details'?: CreateBatchTransferRequestTransfersInnerBeneficiaryDetails;
    /**
     * It can contain any additional remarks for the transfer. Alphanumeric and whitespaces are allowed. The maximum character limit is 70.
     * @type {string}
     * @memberof CreateBatchTransferRequestTransfersInner
     */
    'transfer_remarks'?: string;
    /**
     * It is the ID of the fund source from where you want to debit the transfer amount.
     * @type {string}
     * @memberof CreateBatchTransferRequestTransfersInner
     */
    'fundsource_id'?: string;
}
export declare const CreateBatchTransferRequestTransfersInnerTransferModeEnum: {
    readonly BANKTRANSFER: "banktransfer";
    readonly IMPS: "imps";
    readonly NEFT: "neft";
    readonly RTGS: "rtgs";
    readonly UPI: "upi";
    readonly PAYTM: "paytm";
    readonly AMAZONPAY: "amazonpay";
    readonly CARD: "card";
    readonly CARDUPI: "cardupi";
    readonly UNKNOWN_DEFAULT_OPEN_API: "11184809";
};
export type CreateBatchTransferRequestTransfersInnerTransferModeEnum = typeof CreateBatchTransferRequestTransfersInnerTransferModeEnum[keyof typeof CreateBatchTransferRequestTransfersInnerTransferModeEnum];
/**
 * It should contain the details of the beneficiary who receives the transfer amount.
 * @export
 * @interface CreateBatchTransferRequestTransfersInnerBeneficiaryDetails
 */
export interface CreateBatchTransferRequestTransfersInnerBeneficiaryDetails {
    /**
     * It is the unique ID you created to identify the beneficiary. Alphanumeric characters are allowed.
     * @type {string}
     * @memberof CreateBatchTransferRequestTransfersInnerBeneficiaryDetails
     */
    'beneficiary_id'?: string;
    /**
     * It is the name of the beneficiary. The maximum character limit is 100.
     * @type {string}
     * @memberof CreateBatchTransferRequestTransfersInnerBeneficiaryDetails
     */
    'beneficiary_name'?: string;
    /**
     *
     * @type {CreateBatchTransferRequestTransfersInnerBeneficiaryDetailsBeneficiaryInstrumentDetails}
     * @memberof CreateBatchTransferRequestTransfersInnerBeneficiaryDetails
     */
    'beneficiary_instrument_details'?: CreateBatchTransferRequestTransfersInnerBeneficiaryDetailsBeneficiaryInstrumentDetails;
    /**
     *
     * @type {CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails}
     * @memberof CreateBatchTransferRequestTransfersInnerBeneficiaryDetails
     */
    'beneficiary_contact_details'?: CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails;
}
/**
 * It should contain the details of where the beneficiary will receive the money. You input these details if you haven\'t added the beneficiary in the Payouts dashboard.
 * @export
 * @interface CreateBatchTransferRequestTransfersInnerBeneficiaryDetailsBeneficiaryInstrumentDetails
 */
export interface CreateBatchTransferRequestTransfersInnerBeneficiaryDetailsBeneficiaryInstrumentDetails {
    /**
     * It is the beneficiary bank account number. The value should be between 9 and 18 characters. Alphanumeric characters are allowed. This value is required if beneficiary_id is not present and if the transfer_mode is banktransfer, imps, neft, rtgs mode.
     * @type {string}
     * @memberof CreateBatchTransferRequestTransfersInnerBeneficiaryDetailsBeneficiaryInstrumentDetails
     */
    'bank_account_number'?: string;
    /**
     * It is the IFSC information of the beneficiary\'s bank account in the standard IFSC format. The value should be 11 characters. (The first 4 characters should be alphabets, the 5th character should be a 0, and the remaining 6 characters should be numerals.)
     * @type {string}
     * @memberof CreateBatchTransferRequestTransfersInnerBeneficiaryDetailsBeneficiaryInstrumentDetails
     */
    'bank_ifsc'?: string;
    /**
     * It is the UPI VPA information of the beneficiary. Only valid UPI VPA information is accepted. It can be an Alphanumeric value with only period (.), hyphen (-), underscore ( _ ), and at the rate of (@). Hyphen (-) is accepted only before at the rate of (@). This value is required if the transfer_mode is upi.
     * @type {string}
     * @memberof CreateBatchTransferRequestTransfersInnerBeneficiaryDetailsBeneficiaryInstrumentDetails
     */
    'vpa'?: string;
}
/**
 * Batch Transfer V2 Response
 * @export
 * @interface CreateBatchTransferResponse
 */
export interface CreateBatchTransferResponse {
    /**
     * It displays the unique ID you created to identify the batch transfer request.
     * @type {string}
     * @memberof CreateBatchTransferResponse
     */
    'batch_transfer_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments. You receive this ID in the response after initiating the batch transfer request.
     * @type {string}
     * @memberof CreateBatchTransferResponse
     */
    'cf_batch_transfer_id'?: string;
    /**
     * It displays the status of the API request.
     * @type {string}
     * @memberof CreateBatchTransferResponse
     */
    'status'?: string;
}
/**
 * Find the request parameters to create a beneficiary
 * @export
 * @interface CreateBeneficiaryRequest
 */
export interface CreateBeneficiaryRequest {
    /**
     * It is the unique ID you create to identify the beneficiary. Alphanumeric, underscore ( _ ), pipe ( | ), and dot ( . ) are allowed.
     * @type {string}
     * @memberof CreateBeneficiaryRequest
     */
    'beneficiary_id': string;
    /**
     * It is the name of the beneficiary. The maximum character limit is 100. Only alphabets and whitespaces are allowed.
     * @type {string}
     * @memberof CreateBeneficiaryRequest
     */
    'beneficiary_name': string;
    /**
     *
     * @type {CreateBeneficiaryRequestBeneficiaryInstrumentDetails}
     * @memberof CreateBeneficiaryRequest
     */
    'beneficiary_instrument_details'?: CreateBeneficiaryRequestBeneficiaryInstrumentDetails;
    /**
     *
     * @type {CreateBeneficiaryRequestBeneficiaryContactDetails}
     * @memberof CreateBeneficiaryRequest
     */
    'beneficiary_contact_details'?: CreateBeneficiaryRequestBeneficiaryContactDetails;
}
/**
 * It should contain the contact details of the beneficiary.
 * @export
 * @interface CreateBeneficiaryRequestBeneficiaryContactDetails
 */
export interface CreateBeneficiaryRequestBeneficiaryContactDetails {
    /**
     * It is the email address of the beneficiary. The maximum character limit is 200. It should contain dot (.) and at the rate of (@).
     * @type {string}
     * @memberof CreateBeneficiaryRequestBeneficiaryContactDetails
     */
    'beneficiary_email'?: string;
    /**
     * It is the phone number of the beneficiary. Only reigstered Indian phone numbers are allowed. The value should be between 8 and 12 characters after stripping +91.
     * @type {string}
     * @memberof CreateBeneficiaryRequestBeneficiaryContactDetails
     */
    'beneficiary_phone'?: string;
    /**
     * It is the country code (+91) of the beneficiary\'s phone number
     * @type {string}
     * @memberof CreateBeneficiaryRequestBeneficiaryContactDetails
     */
    'beneficiary_country_code'?: string;
    /**
     * It is the address information of the beneficiary.
     * @type {string}
     * @memberof CreateBeneficiaryRequestBeneficiaryContactDetails
     */
    'beneficiary_address'?: string;
    /**
     * It is the name of the city as present in the beneficiary\'s address.
     * @type {string}
     * @memberof CreateBeneficiaryRequestBeneficiaryContactDetails
     */
    'beneficiary_city'?: string;
    /**
     * It is the name of the state as present in the beneficiary\'s address.
     * @type {string}
     * @memberof CreateBeneficiaryRequestBeneficiaryContactDetails
     */
    'beneficiary_state'?: string;
    /**
     * It is the PIN code information as present in the beneficiary\'s address. The maximum character limit is 6. Only numbers are allowed.
     * @type {string}
     * @memberof CreateBeneficiaryRequestBeneficiaryContactDetails
     */
    'beneficiary_postal_code'?: string;
}
/**
 * Beneficiary instrument details
 * @export
 * @interface CreateBeneficiaryRequestBeneficiaryInstrumentDetails
 */
export interface CreateBeneficiaryRequestBeneficiaryInstrumentDetails {
    /**
     * It is the beneficiary bank account number. The value should be between 9 and 18 characters. Alphanumeric characters are allowed. You need to input bank_ifsc if bank_account_number is passed.
     * @type {string}
     * @memberof CreateBeneficiaryRequestBeneficiaryInstrumentDetails
     */
    'bank_account_number'?: string;
    /**
     * It is the IFSC information of the beneficiary\'s bank account in the standard IFSC format. The value should be 11 characters. (The first 4 characters should be alphabets, the 5th character should be a 0, and the remaining 6 characters should be numerals.). You need to input bank_account_number if bank_ifsc is passed.
     * @type {string}
     * @memberof CreateBeneficiaryRequestBeneficiaryInstrumentDetails
     */
    'bank_ifsc'?: string;
    /**
     * It is the UPI VPA information of the beneficiary. Only valid UPI VPA information is accepted. It can be an Alphanumeric value with only period (.), hyphen (-), underscore ( _ ), and at the rate of (@). Hyphen (-) is accepted only before at the rate of (@).
     * @type {string}
     * @memberof CreateBeneficiaryRequestBeneficiaryInstrumentDetails
     */
    'vpa'?: string;
}
/**
 * Standard Transfer V2
 * @export
 * @interface CreateTransferRequest
 */
export interface CreateTransferRequest {
    /**
     * It is the unique ID you create to identify the transfer. You can use a maximum of 40 characters to create a transfer_id.  Alphanumeric and underscore ( _ ) are allowed.
     * @type {string}
     * @memberof CreateTransferRequest
     */
    'transfer_id': string;
    /**
     * It is the transfer amount. Decimal values are allowed. The minimum value should be equal to or greater than 1.00. (>= 1.00)
     * @type {number}
     * @memberof CreateTransferRequest
     */
    'transfer_amount': number;
    /**
     * It is the currency of the transfer amount. The default value is INR.
     * @type {string}
     * @memberof CreateTransferRequest
     */
    'transfer_currency'?: string;
    /**
     * It is the mode of transfer. Allowed values are banktransfer, imps, neft, rtgs, upi, paytm, amazonpay, card. The default transfer_mode is banktransfer.
     * @type {string}
     * @memberof CreateTransferRequest
     */
    'transfer_mode'?: CreateTransferRequestTransferModeEnum;
    /**
     *
     * @type {CreateTransferRequestBeneficiaryDetails}
     * @memberof CreateTransferRequest
     */
    'beneficiary_details'?: CreateTransferRequestBeneficiaryDetails;
    /**
     * It can contain any additional remarks for the transfer. Alphanumeric and whitespaces are allowed. The maximum character limit is 70.
     * @type {string}
     * @memberof CreateTransferRequest
     */
    'transfer_remarks'?: string;
    /**
     * It is the ID of the fund source from which the transfer amount will be debited.
     * @type {string}
     * @memberof CreateTransferRequest
     */
    'fundsource_id'?: string;
}
export declare const CreateTransferRequestTransferModeEnum: {
    readonly BANKTRANSFER: "banktransfer";
    readonly IMPS: "imps";
    readonly NEFT: "neft";
    readonly RTGS: "rtgs";
    readonly UPI: "upi";
    readonly PAYTM: "paytm";
    readonly AMAZONPAY: "amazonpay";
    readonly CARD: "card";
    readonly CARDUPI: "cardupi";
    readonly UNKNOWN_DEFAULT_OPEN_API: "11184809";
};
export type CreateTransferRequestTransferModeEnum = typeof CreateTransferRequestTransferModeEnum[keyof typeof CreateTransferRequestTransferModeEnum];
/**
 * It should contain the details of the beneficiary who receives the transfer amount.
 * @export
 * @interface CreateTransferRequestBeneficiaryDetails
 */
export interface CreateTransferRequestBeneficiaryDetails {
    /**
     * It is the unique ID you created to identify the beneficiary. Alphanumeric characters are allowed.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetails
     */
    'beneficiary_id'?: string;
    /**
     * It is the name of the beneficiary. The maximum character limit is 100.  Only alphabets and whitespaces are allowed. It is required if beneficiary_id is not present.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetails
     */
    'beneficiary_name'?: string;
    /**
     *
     * @type {CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetails}
     * @memberof CreateTransferRequestBeneficiaryDetails
     */
    'beneficiary_instrument_details'?: CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetails;
    /**
     *
     * @type {CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails}
     * @memberof CreateTransferRequestBeneficiaryDetails
     */
    'beneficiary_contact_details'?: CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails;
}
/**
 * It should contain the contact details of the beneficiary.
 * @export
 * @interface CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails
 */
export interface CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails {
    /**
     * It is the email address of the beneficiary. The maximum character limit is 200. It should contain dot (.) and at the rate of (@).
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails
     */
    'beneficiary_email'?: string;
    /**
     * It is the phone number of the beneficiary. Only registered Indian phone numbers are allowed. The value should be between 8 and 12 characters after stripping +91.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails
     */
    'beneficiary_phone'?: string;
    /**
     * It is the country code (+91) of the beneficiary\'s phone number.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails
     */
    'beneficiary_country_code'?: string;
    /**
     * It should contain the address of the beneficiary. The maximum character limit is 150. Alphanumeric characters and whitespaces are allowed.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails
     */
    'beneficiary_address'?: string;
    /**
     * It is the name of the city as present in the beneficiary address. The maximum character limit is 50. Alphanumeric characters and whitespaces are allowed.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails
     */
    'beneficiary_city'?: string;
    /**
     * It is the name of the state as present in the beneficiary address. The maximum character limit is 50. Alphanumeric characters and whitespaces are allowed.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails
     */
    'beneficiary_state'?: string;
    /**
     * It is the PIN code as present in the address. It should be a 6 character numeric value.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryContactDetails
     */
    'beneficiary_postal_code'?: string;
}
/**
 * It should contain the details of where the beneficiary will receive the money. You input these details if you haven\'t added the beneficiary in the Payouts dashboard.
 * @export
 * @interface CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetails
 */
export interface CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetails {
    /**
     * It is the beneficiary bank account number. The value should be between 9 and 18 characters. Alphanumeric characters are allowed. This value is required if beneficiary_id is not present and if the transfer_mode is banktransfer, imps, neft,rtgs mode.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetails
     */
    'bank_account_number'?: string;
    /**
     * It is the IFSC information of the beneficiary\'s bank account in the standard IFSC format. The value should be 11 characters. (The first 4 characters should be alphabets, the 5th character should be a 0, and the remaining 6 characters should be numerals.)
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetails
     */
    'bank_ifsc'?: string;
    /**
     * It is the UPI VPA information of the beneficiary. Only valid UPI VPA information is accepted. It can be an Alphanumeric value with only period (.), hyphen (-), underscore ( _ ), and at the rate of (@). Hyphen (-) is accepted only before at the rate of (@). This value is required if the transfer_mode is upi.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetails
     */
    'vpa'?: string;
    /**
     *
     * @type {CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetails
     */
    'card_details'?: CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails;
}
/**
 * It should contain the card details of the beneficiary.
 * @export
 * @interface CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails
 */
export interface CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails {
    /**
     * It is the tokenised card number or card token for this transfer.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails
     */
    'card_token'?: string;
    /**
     * It is the network type of the card - VISA/MASTERCARD.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails
     */
    'card_network_type'?: CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetailsCardNetworkTypeEnum;
    /**
     * It is the formatted chip/cryptogram data relating to the token cryptogram. The maximum character limit is 600. It is optional for MASTERCARD and not required for VISA.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails
     */
    'card_cryptogram'?: string;
    /**
     * It is applicable only for MASTERCARD. The format for the valid token expiry date should be YYYY-MM. It cannot be null. Provide a valid tokenExpiry if collected from the customers. If unavailable, populate a static value with a forward year and month in the correct format (YYYY-MM). The maximum character limit is 10.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails
     */
    'card_token_expiry'?: string;
    /**
     * It is the type of the card. DEBIT and CREDIT are the only values allowed. The default value is CREDIT if the parameter does not exist or not specified.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails
     */
    'card_type'?: string;
    /**
     * A maximum of 3 alphanumeric characters are allowed. It is an optional parameter for MASTERCARD.
     * @type {string}
     * @memberof CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetails
     */
    'card_token_PAN_sequence_number'?: string;
}
export declare const CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetailsCardNetworkTypeEnum: {
    readonly VISA: "VISA";
    readonly MASTERCARD: "MASTERCARD";
    readonly UNKNOWN_DEFAULT_OPEN_API: "11184809";
};
export type CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetailsCardNetworkTypeEnum = typeof CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetailsCardNetworkTypeEnum[keyof typeof CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetailsCardNetworkTypeEnum];
/**
 * Standard Transfer V2 Response
 * @export
 * @interface CreateTransferResponse
 */
export interface CreateTransferResponse {
    /**
     * It displays the unique ID you created to identify the transfer.
     * @type {string}
     * @memberof CreateTransferResponse
     */
    'transfer_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments. You receive this ID in the response after initiating the standard transfer request.
     * @type {string}
     * @memberof CreateTransferResponse
     */
    'cf_transfer_id'?: string;
    /**
     * It displays the status of the transfer.
     * @type {string}
     * @memberof CreateTransferResponse
     */
    'status'?: string;
    /**
     *
     * @type {CreateTransferResponseBeneficiaryDetails}
     * @memberof CreateTransferResponse
     */
    'beneficiary_details'?: CreateTransferResponseBeneficiaryDetails;
    /**
     * It displays the transfer amount initiated in the request.
     * @type {number}
     * @memberof CreateTransferResponse
     */
    'transfer_amount'?: number;
    /**
     * It displays the service charge applicable for the successful transfer request.
     * @type {number}
     * @memberof CreateTransferResponse
     */
    'transfer_service_charge'?: number;
    /**
     * It displays the service tax applicable for the successful transfer request.
     * @type {number}
     * @memberof CreateTransferResponse
     */
    'transfer_service_tax'?: number;
    /**
     * It displays the mode of the transfer.
     * @type {string}
     * @memberof CreateTransferResponse
     */
    'transfer_mode'?: string;
    /**
     * It displays the unique number that is generated to recognise any fund transfer that is created by the bank that facilitates the transfer.
     * @type {string}
     * @memberof CreateTransferResponse
     */
    'transfer_utr'?: string;
    /**
     * It displays the ID of the fund source from where the money was debited for this transfer request.
     * @type {string}
     * @memberof CreateTransferResponse
     */
    'fundsource_id'?: string;
    /**
     * It displays the time of when the transfer request was added to the system.
     * @type {string}
     * @memberof CreateTransferResponse
     */
    'added_on'?: string;
    /**
     * It displays the updated time for the transfer.
     * @type {string}
     * @memberof CreateTransferResponse
     */
    'updated_on'?: string;
}
/**
 * It displays the details of the beneficiary.
 * @export
 * @interface CreateTransferResponseBeneficiaryDetails
 */
export interface CreateTransferResponseBeneficiaryDetails {
    /**
     * It displays the unique ID to identify the beneficiary to whom you initiated the transfer request.
     * @type {string}
     * @memberof CreateTransferResponseBeneficiaryDetails
     */
    'beneficiary_id'?: string;
    /**
     *
     * @type {CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails}
     * @memberof CreateTransferResponseBeneficiaryDetails
     */
    'beneficiary_instrument_details'?: CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails;
}
/**
 * It displays the details of where the beneficiary will receive the money.
 * @export
 * @interface CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails
 */
export interface CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails {
    /**
     * It displays the bank account number of the beneficiary.
     * @type {string}
     * @memberof CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails
     */
    'bank_account_number'?: string;
    /**
     * It displays the IFSC information of the beneficiary\'s bank account.
     * @type {string}
     * @memberof CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails
     */
    'ifsc'?: string;
    /**
     * It displays the UPI VPA information of the beneficiary.
     * @type {string}
     * @memberof CreateTransferResponseBeneficiaryDetailsBeneficiaryInstrumentDetails
     */
    'vpa'?: string;
}
/**
 * Error Response for non-2XX cases
 * @export
 * @interface ErrorV2
 */
export interface ErrorV2 {
    /**
     * Type of the error received
     * @type {string}
     * @memberof ErrorV2
     */
    'type'?: string;
    /**
     * Code of the error received
     * @type {string}
     * @memberof ErrorV2
     */
    'code'?: string;
    /**
     * Detailed message explaining the response
     * @type {string}
     * @memberof ErrorV2
     */
    'message'?: string;
}
/**
 * Batch Transfer Status V2 Response
 * @export
 * @interface FetchBatchTransferResponse
 */
export interface FetchBatchTransferResponse {
    /**
     * It displays the unique ID you created to identify the batch transfer.
     * @type {string}
     * @memberof FetchBatchTransferResponse
     */
    'batch_transfer_id'?: string;
    /**
     * It displays the unique ID created by Cashfree Payments. You receive this ID in the response after initiating the batch transfer request.
     * @type {string}
     * @memberof FetchBatchTransferResponse
     */
    'cf_batch_transfer_id'?: string;
    /**
     * It displays the status of the batch transfer.
     * @type {string}
     * @memberof FetchBatchTransferResponse
     */
    'status'?: string;
    /**
     *
     * @type {Array<CreateTransferResponse>}
     * @memberof FetchBatchTransferResponse
     */
    'transfers'?: Array<CreateTransferResponse>;
}
/**
 * TransfersV2Api - object-oriented interface
 * @export
 * @class TransfersV2Api
 * @extends {BaseAPI}
 */
declare class Environment {
    PRODUCTION: CFEnvironment;
    SANDBOX: CFEnvironment;
}
export declare class PayoutWebhookEvent {
    type: string;
    raw: string;
    object: any;
    constructor(type: string, rawBody: string, object: any);
}
export declare class Cashfree {
    static axios: AxiosInstance;
    static basePath: string;
    static XClientId?: string;
    static XClientSecret?: string;
    static XEnvironment: CFEnvironment;
    static XEnableErrorAnalytics: boolean;
    static XApiVersion: string;
    static Environment: Environment;
    /**
     * Use this API to verify your webhook signature once you receive from Cashfree's server.
     * @summary Verify Webhook Signatures
     * @param {string} signature that is present in the header of the webhook ("x-webhook-signature")
     * @param {string} rawBody is the entire body sent to the server in string format
     * @param {string} timestamp that is present in the header of the webhook ("x-webhook-timestamp")
     * @throws {Error}
     */
    static PayoutVerifyWebhookSignature(signature: string, rawBody: string, timestamp: string): PayoutWebhookEvent;
    /**
     * Use this API to add a beneficiary to your Cashfree Payments account by providing the bank account number, IFSC, and other required details. Ensure the successful creation of the benficiary in your account before initiating a transfer.
     * @summary Create Beneficiary V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {CreateBeneficiaryRequest} [CreateBeneficiaryRequest] Find the request parameters to create a beneficiary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryV2Api
     */
    static PayoutCreateBeneficiary(x_api_version: string, x_request_id?: string, CreateBeneficiaryRequest?: CreateBeneficiaryRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Beneficiary, any>>;
    /**
     * Use this API to remove an existing beneficiary from the list of added beneficiaries.
     * @summary Remove Beneficiary V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {string} [beneficiary_id] It is the unique ID you create to identify the beneficiary. The maximum character limit is 50. Only alphabets and whitespaces are allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryV2Api
     */
    static PayoutDeleteBeneficiary(x_api_version: string, x_request_id?: string, beneficiary_id?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Beneficiary, any>>;
    /**
     * Use this API to get the details of a particular beneficiary from your account. You can pass either beneficiary_id or the combination of bank_account_number and bank_ifsc to fetch the details.
     * @summary Get Beneficiary V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {string} [beneficiary_id] It is the unique ID you created to identify the beneficiary while creating the beneficiary.
     * @param {string} [bank_account_number] It is the bank account number of the beneficiary. If bank_account_number is passed in query, bank_ifsc should also be passed.
     * @param {string} [bank_ifsc] It is the IFSC information as present in the beneficiary\&#39;s bank account information. If bank_ifsc is passed in query, bank_account_number should also be passed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryV2Api
     */
    static PayoutFetchBeneficiary(x_api_version: string, x_request_id?: string, beneficiary_id?: string, bank_account_number?: string, bank_ifsc?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Beneficiary, any>>;
    /**
     * Use this API to get the status of the initiated batch transfer. You can use either the batch_transfer_id or cf_batch_transfer_id to fetch the details.
     * @summary Get Batch Transfer Status V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {string} [cf_batch_transfer_id] It is the unique ID created by Cashfree Payments. You receive it in the response of the initiated batch transfer request. (Either cf_batch_transfer_id or batch_transfer_id is mandatory)
     * @param {string} [batch_transfer_id] It is the unique ID you created to identify the batch transfer request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersV2Api
     */
    static PayoutFetchBatchTransfer(x_api_version: string, x_request_id?: string, cf_batch_transfer_id?: string, batch_transfer_id?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FetchBatchTransferResponse, any>>;
    /**
     * Use this API to get the status of the initiated transfer. You can use either the transfer_id or cf_transfer_id to fetch the details.
     * @summary Get Transfer Status V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {string} [cf_transfer_id] It is the unique ID created by Cashfree Payments. You receive it in the response of the initiated standard transfer request. (Either cf_transfer_id or transfer_id is mandatory)
     * @param {string} [transfer_id] It is the unique ID you created to identify the standard transfer request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersV2Api
     */
    static PayoutFetchTransfer(x_api_version: string, x_request_id?: string, cf_transfer_id?: string, transfer_id?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateTransferResponse, any>>;
    /**
     * Use this API to initiate a batch transfer request at Cashfree Payments. You can transfer money to multiple beneficiaries.
     * @summary Batch Transfer V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {CreateBatchTransferRequest} [CreateBatchTransferRequest] Find the request parameters of the API request to transfer money to multiple beneficiaries.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersV2Api
     */
    static PayoutInitiateBatchTransfer(x_api_version: string, x_request_id?: string, CreateBatchTransferRequest?: CreateBatchTransferRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateBatchTransferResponse, any>>;
    /**
     * Use this API to initiate an amount transfer at Cashfree Payments. It is an async request by default.
     * @summary Standard Transfer V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {CreateTransferRequest} [CreateTransferRequest] Find the request parameters of the API request to transfer money to a beneficiary.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersV2Api
     */
    static PayoutInitiateTransfer(x_api_version: string, x_request_id?: string, CreateTransferRequest?: CreateTransferRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateTransferResponse, any>>;
}
export {};
