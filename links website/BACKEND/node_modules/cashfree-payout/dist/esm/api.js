/* tslint:disable */
/* eslint-disable */
/**
 * Cashfree Payout APIs
 * Cashfree\'s Payout APIs provide developers with a streamlined pathway to integrate advanced payout capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2024-01-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setApiKeyToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import { CFEnvironment } from './configuration';
import * as Sentry from "@sentry/node";
import * as crypto from "crypto";
export const BeneficiaryBeneficiaryStatusEnum = {
    VERIFIED: 'VERIFIED',
    INVALID: 'INVALID',
    INITIATED: 'INITIATED',
    CANCELLED: 'CANCELLED',
    FAILED: 'FAILED',
    DELETED: 'DELETED',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const CreateBatchTransferRequestTransfersInnerTransferModeEnum = {
    BANKTRANSFER: 'banktransfer',
    IMPS: 'imps',
    NEFT: 'neft',
    RTGS: 'rtgs',
    UPI: 'upi',
    PAYTM: 'paytm',
    AMAZONPAY: 'amazonpay',
    CARD: 'card',
    CARDUPI: 'cardupi',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const CreateTransferRequestTransferModeEnum = {
    BANKTRANSFER: 'banktransfer',
    IMPS: 'imps',
    NEFT: 'neft',
    RTGS: 'rtgs',
    UPI: 'upi',
    PAYTM: 'paytm',
    AMAZONPAY: 'amazonpay',
    CARD: 'card',
    CARDUPI: 'cardupi',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
export const CreateTransferRequestBeneficiaryDetailsBeneficiaryInstrumentDetailsCardDetailsCardNetworkTypeEnum = {
    VISA: 'VISA',
    MASTERCARD: 'MASTERCARD',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
/**
 * BeneficiaryV2Api - axios parameter creator
 * @export
 */
const BeneficiaryV2ApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to add a beneficiary to your Cashfree Payments account by providing the bank account number, IFSC, and other required details. Ensure the successful creation of the benficiary in your account before initiating a transfer.
         * @summary Create Beneficiary V2
         
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {CreateBeneficiaryRequest} [CreateBeneficiaryRequest] Find the request parameters to create a beneficiary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         *
         */
        payoutCreateBeneficiary: (x_api_version, x_request_id, CreateBeneficiaryRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('payoutCreateBeneficiary', 'x_api_version', x_api_version);
            const localVarPath = `/beneficiary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/payout";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/payout";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-0.0.14';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateBeneficiaryRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to remove an existing beneficiary from the list of added beneficiaries.
         * @summary Remove Beneficiary V2
         
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {string} [beneficiary_id] It is the unique ID you create to identify the beneficiary. The maximum character limit is 50. Only alphabets and whitespaces are allowed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         *
         */
        payoutDeleteBeneficiary: (x_api_version, x_request_id, beneficiary_id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('payoutDeleteBeneficiary', 'x_api_version', x_api_version);
            const localVarPath = `/beneficiary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/payout";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/payout";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            if (beneficiary_id !== undefined) {
                localVarQueryParameter['beneficiary_id'] = beneficiary_id;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-0.0.14';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get the details of a particular beneficiary from your account. You can pass either beneficiary_id or the combination of bank_account_number and bank_ifsc to fetch the details.
         * @summary Get Beneficiary V2
         
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {string} [beneficiary_id] It is the unique ID you created to identify the beneficiary while creating the beneficiary.
         * @param {string} [bank_account_number] It is the bank account number of the beneficiary. If bank_account_number is passed in query, bank_ifsc should also be passed.
         * @param {string} [bank_ifsc] It is the IFSC information as present in the beneficiary\&#39;s bank account information. If bank_ifsc is passed in query, bank_account_number should also be passed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * bank_account_number?: string,
         */
        payoutFetchBeneficiary: (x_api_version, x_request_id, beneficiary_id, bank_account_number, bank_ifsc, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('payoutFetchBeneficiary', 'x_api_version', x_api_version);
            const localVarPath = `/beneficiary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/payout";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/payout";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            if (beneficiary_id !== undefined) {
                localVarQueryParameter['beneficiary_id'] = beneficiary_id;
            }
            if (bank_account_number !== undefined) {
                localVarQueryParameter['bank_account_number'] = bank_account_number;
            }
            if (bank_ifsc !== undefined) {
                localVarQueryParameter['bank_ifsc'] = bank_ifsc;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-0.0.14';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * BeneficiaryV2Api - functional programming interface
 * @export
 */
const BeneficiaryV2ApiFp = function (configuration) {
    const localVarAxiosParamCreator = BeneficiaryV2ApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to add a beneficiary to your Cashfree Payments account by providing the bank account number, IFSC, and other required details. Ensure the successful creation of the benficiary in your account before initiating a transfer.
         * @summary Create Beneficiary V2
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {CreateBeneficiaryRequest} [CreateBeneficiaryRequest] Find the request parameters to create a beneficiary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutCreateBeneficiary(x_api_version, x_request_id, CreateBeneficiaryRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.payoutCreateBeneficiary(x_api_version, x_request_id, CreateBeneficiaryRequest, options);
                var url = "https://sandbox.cashfree.com/payout";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/payout";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to remove an existing beneficiary from the list of added beneficiaries.
         * @summary Remove Beneficiary V2
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {string} [beneficiary_id] It is the unique ID you create to identify the beneficiary. The maximum character limit is 50. Only alphabets and whitespaces are allowed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutDeleteBeneficiary(x_api_version, x_request_id, beneficiary_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.payoutDeleteBeneficiary(x_api_version, x_request_id, beneficiary_id, options);
                var url = "https://sandbox.cashfree.com/payout";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/payout";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get the details of a particular beneficiary from your account. You can pass either beneficiary_id or the combination of bank_account_number and bank_ifsc to fetch the details.
         * @summary Get Beneficiary V2
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {string} [beneficiary_id] It is the unique ID you created to identify the beneficiary while creating the beneficiary.
         * @param {string} [bank_account_number] It is the bank account number of the beneficiary. If bank_account_number is passed in query, bank_ifsc should also be passed.
         * @param {string} [bank_ifsc] It is the IFSC information as present in the beneficiary\&#39;s bank account information. If bank_ifsc is passed in query, bank_account_number should also be passed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutFetchBeneficiary(x_api_version, x_request_id, beneficiary_id, bank_account_number, bank_ifsc, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.payoutFetchBeneficiary(x_api_version, x_request_id, beneficiary_id, bank_account_number, bank_ifsc, options);
                var url = "https://sandbox.cashfree.com/payout";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/payout";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * BeneficiaryV2Api - object-oriented interface
 * @export
 * @class BeneficiaryV2Api
 * @extends {BaseAPI}
 */
/**
 * TransfersV2Api - axios parameter creator
 * @export
 */
const TransfersV2ApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to get the status of the initiated batch transfer. You can use either the batch_transfer_id or cf_batch_transfer_id to fetch the details.
         * @summary Get Batch Transfer Status V2
         
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {string} [cf_batch_transfer_id] It is the unique ID created by Cashfree Payments. You receive it in the response of the initiated batch transfer request. (Either cf_batch_transfer_id or batch_transfer_id is mandatory)
         * @param {string} [batch_transfer_id] It is the unique ID you created to identify the batch transfer request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * batch_transfer_id?: string,
         */
        payoutFetchBatchTransfer: (x_api_version, x_request_id, cf_batch_transfer_id, batch_transfer_id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('payoutFetchBatchTransfer', 'x_api_version', x_api_version);
            const localVarPath = `/transfers/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/payout";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/payout";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            if (cf_batch_transfer_id !== undefined) {
                localVarQueryParameter['cf_batch_transfer_id'] = cf_batch_transfer_id;
            }
            if (batch_transfer_id !== undefined) {
                localVarQueryParameter['batch_transfer_id'] = batch_transfer_id;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-0.0.14';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get the status of the initiated transfer. You can use either the transfer_id or cf_transfer_id to fetch the details.
         * @summary Get Transfer Status V2
         
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {string} [cf_transfer_id] It is the unique ID created by Cashfree Payments. You receive it in the response of the initiated standard transfer request. (Either cf_transfer_id or transfer_id is mandatory)
         * @param {string} [transfer_id] It is the unique ID you created to identify the standard transfer request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * transfer_id?: string,
         */
        payoutFetchTransfer: (x_api_version, x_request_id, cf_transfer_id, transfer_id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('payoutFetchTransfer', 'x_api_version', x_api_version);
            const localVarPath = `/transfers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/payout";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/payout";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            if (cf_transfer_id !== undefined) {
                localVarQueryParameter['cf_transfer_id'] = cf_transfer_id;
            }
            if (transfer_id !== undefined) {
                localVarQueryParameter['transfer_id'] = transfer_id;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-0.0.14';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to initiate a batch transfer request at Cashfree Payments. You can transfer money to multiple beneficiaries.
         * @summary Batch Transfer V2
         
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {CreateBatchTransferRequest} [CreateBatchTransferRequest] Find the request parameters of the API request to transfer money to multiple beneficiaries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         *
         */
        payoutInitiateBatchTransfer: (x_api_version, x_request_id, CreateBatchTransferRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('payoutInitiateBatchTransfer', 'x_api_version', x_api_version);
            const localVarPath = `/transfers/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/payout";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/payout";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-0.0.14';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateBatchTransferRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to initiate an amount transfer at Cashfree Payments. It is an async request by default.
         * @summary Standard Transfer V2
         
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {CreateTransferRequest} [CreateTransferRequest] Find the request parameters of the API request to transfer money to a beneficiary.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         *
         */
        payoutInitiateTransfer: (x_api_version, x_request_id, CreateTransferRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            assertParamExists('payoutInitiateTransfer', 'x_api_version', x_api_version);
            const localVarPath = `/transfers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/payout";
            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/payout";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XClientSecret required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-secret");
            // authentication XClientID required
            yield setApiKeyToObject(localVarHeaderParameter, "x-client-id");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-0.0.14';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(CreateTransferRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TransfersV2Api - functional programming interface
 * @export
 */
const TransfersV2ApiFp = function (configuration) {
    const localVarAxiosParamCreator = TransfersV2ApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to get the status of the initiated batch transfer. You can use either the batch_transfer_id or cf_batch_transfer_id to fetch the details.
         * @summary Get Batch Transfer Status V2
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {string} [cf_batch_transfer_id] It is the unique ID created by Cashfree Payments. You receive it in the response of the initiated batch transfer request. (Either cf_batch_transfer_id or batch_transfer_id is mandatory)
         * @param {string} [batch_transfer_id] It is the unique ID you created to identify the batch transfer request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutFetchBatchTransfer(x_api_version, x_request_id, cf_batch_transfer_id, batch_transfer_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.payoutFetchBatchTransfer(x_api_version, x_request_id, cf_batch_transfer_id, batch_transfer_id, options);
                var url = "https://sandbox.cashfree.com/payout";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/payout";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to get the status of the initiated transfer. You can use either the transfer_id or cf_transfer_id to fetch the details.
         * @summary Get Transfer Status V2
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {string} [cf_transfer_id] It is the unique ID created by Cashfree Payments. You receive it in the response of the initiated standard transfer request. (Either cf_transfer_id or transfer_id is mandatory)
         * @param {string} [transfer_id] It is the unique ID you created to identify the standard transfer request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutFetchTransfer(x_api_version, x_request_id, cf_transfer_id, transfer_id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.payoutFetchTransfer(x_api_version, x_request_id, cf_transfer_id, transfer_id, options);
                var url = "https://sandbox.cashfree.com/payout";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/payout";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to initiate a batch transfer request at Cashfree Payments. You can transfer money to multiple beneficiaries.
         * @summary Batch Transfer V2
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {CreateBatchTransferRequest} [CreateBatchTransferRequest] Find the request parameters of the API request to transfer money to multiple beneficiaries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutInitiateBatchTransfer(x_api_version, x_request_id, CreateBatchTransferRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.payoutInitiateBatchTransfer(x_api_version, x_request_id, CreateBatchTransferRequest, options);
                var url = "https://sandbox.cashfree.com/payout";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/payout";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
        /**
         * Use this API to initiate an amount transfer at Cashfree Payments. It is an async request by default.
         * @summary Standard Transfer V2
         * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
         * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
         * @param {CreateTransferRequest} [CreateTransferRequest] Find the request parameters of the API request to transfer money to a beneficiary.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        payoutInitiateTransfer(x_api_version, x_request_id, CreateTransferRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.payoutInitiateTransfer(x_api_version, x_request_id, CreateTransferRequest, options);
                var url = "https://sandbox.cashfree.com/payout";
                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/payout";
                }
                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);
            });
        },
    };
};
/**
 * TransfersV2Api - object-oriented interface
 * @export
 * @class TransfersV2Api
 * @extends {BaseAPI}
 */
class Environment {
    constructor() {
        this.PRODUCTION = CFEnvironment.PRODUCTION;
        this.SANDBOX = CFEnvironment.SANDBOX;
    }
}
export class PayoutWebhookEvent {
    constructor(type, rawBody, object) {
        this.type = type;
        this.raw = rawBody;
        this.object = object;
    }
}
export class Cashfree {
    /**
     * Use this API to verify your webhook signature once you receive from Cashfree's server.
     * @summary Verify Webhook Signatures
     * @param {string} signature that is present in the header of the webhook ("x-webhook-signature")
     * @param {string} rawBody is the entire body sent to the server in string format
     * @param {string} timestamp that is present in the header of the webhook ("x-webhook-timestamp")
     * @throws {Error}
     */
    static PayoutVerifyWebhookSignature(signature, rawBody, timestamp) {
        const body = timestamp + rawBody;
        const secretKey = Cashfree.XClientSecret;
        let generatedSignature = crypto.createHmac('sha256', secretKey).update(body).digest("base64");
        if (generatedSignature === signature) {
            let jsonObject = JSON.parse(rawBody);
            return new PayoutWebhookEvent(jsonObject.type, rawBody, jsonObject);
        }
        throw new Error("Generated signature and received signature did not match.");
    }
    /**
     * Use this API to add a beneficiary to your Cashfree Payments account by providing the bank account number, IFSC, and other required details. Ensure the successful creation of the benficiary in your account before initiating a transfer.
     * @summary Create Beneficiary V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {CreateBeneficiaryRequest} [CreateBeneficiaryRequest] Find the request parameters to create a beneficiary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryV2Api
     */
    static PayoutCreateBeneficiary(x_api_version, x_request_id, CreateBeneficiaryRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://6893fdfe9ac5e27ecb78db00373f165a@o330525.ingest.us.sentry.io/4506874364231680',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-payout")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-payout")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "0.0.14");
            });
        }
        try {
            return BeneficiaryV2ApiFp().payoutCreateBeneficiary(x_api_version, x_request_id, CreateBeneficiaryRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to remove an existing beneficiary from the list of added beneficiaries.
     * @summary Remove Beneficiary V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {string} [beneficiary_id] It is the unique ID you create to identify the beneficiary. The maximum character limit is 50. Only alphabets and whitespaces are allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryV2Api
     */
    static PayoutDeleteBeneficiary(x_api_version, x_request_id, beneficiary_id, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://6893fdfe9ac5e27ecb78db00373f165a@o330525.ingest.us.sentry.io/4506874364231680',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-payout")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-payout")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "0.0.14");
            });
        }
        try {
            return BeneficiaryV2ApiFp().payoutDeleteBeneficiary(x_api_version, x_request_id, beneficiary_id, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get the details of a particular beneficiary from your account. You can pass either beneficiary_id or the combination of bank_account_number and bank_ifsc to fetch the details.
     * @summary Get Beneficiary V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {string} [beneficiary_id] It is the unique ID you created to identify the beneficiary while creating the beneficiary.
     * @param {string} [bank_account_number] It is the bank account number of the beneficiary. If bank_account_number is passed in query, bank_ifsc should also be passed.
     * @param {string} [bank_ifsc] It is the IFSC information as present in the beneficiary\&#39;s bank account information. If bank_ifsc is passed in query, bank_account_number should also be passed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BeneficiaryV2Api
     */
    static PayoutFetchBeneficiary(x_api_version, x_request_id, beneficiary_id, bank_account_number, bank_ifsc, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://6893fdfe9ac5e27ecb78db00373f165a@o330525.ingest.us.sentry.io/4506874364231680',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-payout")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-payout")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "0.0.14");
            });
        }
        try {
            return BeneficiaryV2ApiFp().payoutFetchBeneficiary(x_api_version, x_request_id, beneficiary_id, bank_account_number, bank_ifsc, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get the status of the initiated batch transfer. You can use either the batch_transfer_id or cf_batch_transfer_id to fetch the details.
     * @summary Get Batch Transfer Status V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {string} [cf_batch_transfer_id] It is the unique ID created by Cashfree Payments. You receive it in the response of the initiated batch transfer request. (Either cf_batch_transfer_id or batch_transfer_id is mandatory)
     * @param {string} [batch_transfer_id] It is the unique ID you created to identify the batch transfer request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersV2Api
     */
    static PayoutFetchBatchTransfer(x_api_version, x_request_id, cf_batch_transfer_id, batch_transfer_id, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://6893fdfe9ac5e27ecb78db00373f165a@o330525.ingest.us.sentry.io/4506874364231680',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-payout")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-payout")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "0.0.14");
            });
        }
        try {
            return TransfersV2ApiFp().payoutFetchBatchTransfer(x_api_version, x_request_id, cf_batch_transfer_id, batch_transfer_id, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get the status of the initiated transfer. You can use either the transfer_id or cf_transfer_id to fetch the details.
     * @summary Get Transfer Status V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {string} [cf_transfer_id] It is the unique ID created by Cashfree Payments. You receive it in the response of the initiated standard transfer request. (Either cf_transfer_id or transfer_id is mandatory)
     * @param {string} [transfer_id] It is the unique ID you created to identify the standard transfer request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersV2Api
     */
    static PayoutFetchTransfer(x_api_version, x_request_id, cf_transfer_id, transfer_id, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://6893fdfe9ac5e27ecb78db00373f165a@o330525.ingest.us.sentry.io/4506874364231680',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-payout")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-payout")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "0.0.14");
            });
        }
        try {
            return TransfersV2ApiFp().payoutFetchTransfer(x_api_version, x_request_id, cf_transfer_id, transfer_id, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to initiate a batch transfer request at Cashfree Payments. You can transfer money to multiple beneficiaries.
     * @summary Batch Transfer V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {CreateBatchTransferRequest} [CreateBatchTransferRequest] Find the request parameters of the API request to transfer money to multiple beneficiaries.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersV2Api
     */
    static PayoutInitiateBatchTransfer(x_api_version, x_request_id, CreateBatchTransferRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://6893fdfe9ac5e27ecb78db00373f165a@o330525.ingest.us.sentry.io/4506874364231680',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-payout")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-payout")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "0.0.14");
            });
        }
        try {
            return TransfersV2ApiFp().payoutInitiateBatchTransfer(x_api_version, x_request_id, CreateBatchTransferRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to initiate an amount transfer at Cashfree Payments. It is an async request by default.
     * @summary Standard Transfer V2
     * @param {string} x_api_version It is the API version to be used. The accepted format is YYYY-MM-DD.
     * @param {string} [x_request_id] It is the request ID for the API call. This ID can be used to resolve tech realted issues. Communicate this in your tech related queries to Cashfree Payments.
     * @param {CreateTransferRequest} [CreateTransferRequest] Find the request parameters of the API request to transfer money to a beneficiary.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransfersV2Api
     */
    static PayoutInitiateTransfer(x_api_version, x_request_id, CreateTransferRequest, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://6893fdfe9ac5e27ecb78db00373f165a@o330525.ingest.us.sentry.io/4506874364231680',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-payout")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-payout")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "0.0.14");
            });
        }
        try {
            return TransfersV2ApiFp().payoutInitiateTransfer(x_api_version, x_request_id, CreateTransferRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
}
Cashfree.XEnableErrorAnalytics = true;
Cashfree.XApiVersion = "2024-01-01";
Cashfree.Environment = new Environment();
